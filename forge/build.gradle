plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

loom {
    forge {
        mixinConfig "servercore.common.mixins.json"
        convertAccessWideners.set true
    }
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft}-${project.forge_version}"

    // Common
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }

    // Night Config
    shadowCommon("com.electronwill.night-config:core:${project.nightconfig}") { transitive false }
    shadowCommon("com.electronwill.night-config:toml:${project.nightconfig}") { transitive false }

    // Mixin Extras
    forgeRuntimeLibrary"com.github.llamalad7.mixinextras:mixinextras-forge:${project.mixin_extras}"

    // Adventure Text
    implementation "net.kyori:adventure-text-serializer-gson:${project.adventure_text}"
    forgeRuntimeLibrary "net.kyori:adventure-text-serializer-gson:${project.adventure_text}"

    implementation "net.kyori:adventure-text-minimessage:${project.adventure_text}"
    forgeRuntimeLibrary "net.kyori:adventure-text-minimessage:${project.adventure_text}"

    // Allows running other mods in dev environment
    modLocalRuntime(fileTree(dir: 'runtime-mods', include: '*.jar'))
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    archiveAppendix.set("forge")
}

shadowJar {
    exclude "architectury.common.json"

    relocate("com.electronwill", "sc_libs.com.electronwill")
    relocate("net.kyori", "sc_libs.net.kyori")
    relocate("org.jetbrains", "sc_libs.org.jetbrains")
    relocate("org.intellij", "sc_libs.org.intellij")

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

processResources {
    inputs.property "version", mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": mod_version
    }
}